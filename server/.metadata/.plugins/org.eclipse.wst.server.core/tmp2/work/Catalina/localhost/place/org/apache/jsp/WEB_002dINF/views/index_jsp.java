/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.87
 * Generated at: 2024-04-12 07:18:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/class/code/server/.metadata/.plugins/org.eclipse.wst.server.core/tmp2/wtpwebapps/Place/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1712096138000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"http://pinnpublic.dothome.co.kr/cdn/example-min.css\">\r\n");
      out.write("<link rel=\"icon\" href=\"/place/favicon.ico\" type=\"image/x-icon\">\r\n");
      out.write("<style>\r\n");
      out.write("	#main {\r\n");
      out.write("		display: grid;\r\n");
      out.write("		grid-template-columns: 900px 300px;\r\n");
      out.write("		align-items: start;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#map {\r\n");
      out.write("		height: 500px;\r\n");
      out.write("		border: 1px solid #AAA;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#list {\r\n");
      out.write("		margin-right: 30px;\r\n");
      out.write("		cursor: pointer;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	h1 > span {\r\n");
      out.write("		float: right;\r\n");
      out.write("		margin-top: -3px;\r\n");
      out.write("		color: yellowgreen;\r\n");
      out.write("		cursor: pointer;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#map2 {\r\n");
      out.write("		width: 465px;\r\n");
      out.write("		height: 400px;\r\n");
      out.write("		border: 1px solid #AAA;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#tblAdd {\r\n");
      out.write("		width: 467px;\r\n");
      out.write("		margin-top: 10px;\r\n");
      out.write("		margin-bottom: 10px;\r\n");
      out.write("		background: rgba(0,0,0,.03);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#tblAdd input, #tblAdd textarea, #tblAdd select {\r\n");
      out.write("		width: 432px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/* \r\n");
      out.write("	#map img {\r\n");
      out.write("		opacity: .5;\r\n");
      out.write("	} \r\n");
      out.write("	*/\r\n");
      out.write("	\r\n");
      out.write("	#tblView {\r\n");
      out.write("		width: 900px;\r\n");
      out.write("		margin-top: 10px;\r\n");
      out.write("		display: none;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#tblView tr:nth-child(1) th:nth-child(1) { width: 150px; }\r\n");
      out.write("	#tblView tr:nth-child(1) td:nth-child(2) { width: 300px; }\r\n");
      out.write("	#tblView tr:nth-child(1) th:nth-child(3) { width: 150px; }\r\n");
      out.write("	#tblView tr:nth-child(1) td:nth-child(4) { width: auto; }\r\n");
      out.write("	\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"wide\">\r\n");
      out.write("	<!-- index.jsp -->\r\n");
      out.write("	<h1>\r\n");
      out.write("		Place <small>Map</small>\r\n");
      out.write("		<span class=\"material-symbols-outlined\" data-sidebar-button=\"add\" id=\"btnSidebar\">file_map</span>\r\n");
      out.write("	</h1>\r\n");
      out.write("	\r\n");
      out.write("	<div id=\"main\">\r\n");
      out.write("		<div id=\"map\"></div>\r\n");
      out.write("		<div id=\"list\" class=\"list full\"></div>\r\n");
      out.write("		<table id=\"tblView\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>장소명</th>\r\n");
      out.write("				<td id=\"viewName\"></td>\r\n");
      out.write("				<th>좌표</th>\r\n");
      out.write("				<td>(<span id=\"viewLat\"></span>,<span id=\"viewLng\"></span>)</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>주소</th>\r\n");
      out.write("				<td colspan=\"3\" id=\"viewAddress\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>설명</th>\r\n");
      out.write("				<td colspan=\"3\" id=\"viewDescription\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<!-- 장소 등록 페이지 -->\r\n");
      out.write("	<div data-sidebar-window=\"add\" data-sidebar-title=\"Add Place\" data-sidebar-direction=\"left\" data-sidebar-size=\"wide\">\r\n");
      out.write("		\r\n");
      out.write("		<div id=\"map2\"></div>\r\n");
      out.write("		\r\n");
      out.write("		<table id=\"tblAdd\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>\r\n");
      out.write("					<select name=\"category\">\r\n");
      out.write("						");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><input type=\"text\" name=\"lat\" placeholder=\"위도\" readonly></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><input type=\"text\" name=\"lng\" placeholder=\"경도\" readonly></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><input type=\"text\" name=\"address\" placeholder=\"주소\" readonly></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><input type=\"text\" name=\"name\" placeholder=\"장소명을 입력하세요.\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td><textarea name=\"description\" placeholder=\"장소에 대한 설명을 입력하세요.\"></textarea></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("		<div>\r\n");
      out.write("			<button type=\"button\" class=\"add\" id=\"btnAdd\">등록하기</button>\r\n");
      out.write("			<button type=\"button\" class=\"back\" id=\"btnClose\">닫기</button>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=aee9a65a1b49a897184f218db1f2b195&libraries=services\"></script>\r\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-3.7.1.js\"></script>\r\n");
      out.write("	<script src=\"http://pinnpublic.dothome.co.kr/cdn/example-min.js\"></script>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("		//메인 지도\r\n");
      out.write("		const container = document.getElementById('map'); \r\n");
      out.write("		const options = {\r\n");
      out.write("				center: new kakao.maps.LatLng(37.49932744336939, 127.03332155759142),\r\n");
      out.write("			level: 3\r\n");
      out.write("		};	\r\n");
      out.write("		const map = new kakao.maps.Map(container, options);\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		//등록 지도\r\n");
      out.write("		const container2 = document.getElementById('map2'); \r\n");
      out.write("		const options2 = {\r\n");
      out.write("				center: new kakao.maps.LatLng(37.49932744336939, 127.03332155759142),\r\n");
      out.write("			level: 3\r\n");
      out.write("		};	\r\n");
      out.write("		const map2 = new kakao.maps.Map(container2, options2);\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		let addMarker = null;\r\n");
      out.write("		let markerPath = 'bakery.png';\r\n");
      out.write("		\r\n");
      out.write("		kakao.maps.event.addListener(map2, 'click', function(evt) {\r\n");
      out.write("			\r\n");
      out.write("			if (addMarker != null) {\r\n");
      out.write("				addMarker.setMap(null);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			addMarker = new kakao.maps.Marker({\r\n");
      out.write("				position: new kakao.maps.LatLng(evt.latLng.getLat(), evt.latLng.getLng())\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			setMarkerImage();			\r\n");
      out.write("			addMarker.setMap(map2);\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			const geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("			\r\n");
      out.write("			let address = '';\r\n");
      out.write("			\r\n");
      out.write("			geocoder.coord2Address(evt.latLng.getLng(), evt.latLng.getLat()\r\n");
      out.write("									, function(result, status) {\r\n");
      out.write("				if (status == kakao.maps.services.Status.OK) {\r\n");
      out.write("					address = result[0].address.address_name;\r\n");
      out.write("				} else {\r\n");
      out.write("					address = '주소를 찾지 못했습니다.';\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				$('#tblAdd input[name=address]').val(address);\r\n");
      out.write("				\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			$('#tblAdd input[name=lat]').val(evt.latLng.getLat());\r\n");
      out.write("			$('#tblAdd input[name=lng]').val(evt.latLng.getLng());\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		}); //마커 등록 + 클릭\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		//DB Data > (변환) > JavaScript Data\r\n");
      out.write("		const markerList = [\r\n");
      out.write("			");
      if (_jspx_meth_c_005fforEach_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("		];\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		//등록 + 카테고리 기본값\r\n");
      out.write("		$('#tblAdd select').val(6);\r\n");
      out.write("		\r\n");
      out.write("		$('#tblAdd select').change(function() {\r\n");
      out.write("			\r\n");
      out.write("			//alert(event.target.value);\r\n");
      out.write("			\r\n");
      out.write("			markerList.forEach(item => {\r\n");
      out.write("				if (item.seq == event.target.value) {\r\n");
      out.write("					//alert(item.marker);\r\n");
      out.write("					markerPath = item.marker;			\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			setMarkerImage();\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		function setMarkerImage() {\r\n");
      out.write("			\r\n");
      out.write("			if (addMarker != null) {\r\n");
      out.write("				const path = '/place/marker/' + markerPath;\r\n");
      out.write("				const size = new kakao.maps.Size(64, 64);\r\n");
      out.write("				const op = {};\r\n");
      out.write("				const mImg = new kakao.maps.MarkerImage(path,size,op);\r\n");
      out.write("				addMarker.setImage(mImg);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		$('#btnAdd').click(() => {\r\n");
      out.write("						\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: 'POST',\r\n");
      out.write("				url: '/place/addplace.do',\r\n");
      out.write("				data: {\r\n");
      out.write("					category: $('#tblAdd select').val(),\r\n");
      out.write("					lat: $('#tblAdd input[name=lat]').val(),\r\n");
      out.write("					lng: $('#tblAdd input[name=lng]').val(),\r\n");
      out.write("					address: $('#tblAdd input[name=address]').val(),\r\n");
      out.write("					name: $('#tblAdd input[name=name]').val(),\r\n");
      out.write("					description: $('#tblAdd textarea').val()\r\n");
      out.write("				},\r\n");
      out.write("				dataType: 'json',\r\n");
      out.write("				success: function(result) {\r\n");
      out.write("					\r\n");
      out.write("					if (result.result == 1) {\r\n");
      out.write("						\r\n");
      out.write("						addMarker.setMap(null);\r\n");
      out.write("						map2.setCenter(new kakao.maps.LatLng(37.49932744336939, 127.03332155759142));\r\n");
      out.write("						\r\n");
      out.write("						$('#tblAdd select').val(6);\r\n");
      out.write("						$('#tblAdd input[name=lat]').val('');\r\n");
      out.write("						$('#tblAdd input[name=lng]').val('');\r\n");
      out.write("						$('#tblAdd input[name=address]').val('');\r\n");
      out.write("						$('#tblAdd input[name=name]').val('');\r\n");
      out.write("						$('#tblAdd textarea').val('');\r\n");
      out.write("						\r\n");
      out.write("						//이전 목록 지우기(초기화)\r\n");
      out.write("						$('#list').html('');\r\n");
      out.write("						\r\n");
      out.write("						plist.forEach(obj => {\r\n");
      out.write("							obj.markerObj.setMap(null);\r\n");
      out.write("						});		\r\n");
      out.write("						\r\n");
      out.write("						load();\r\n");
      out.write("						\r\n");
      out.write("						$('.sidebar-title .material-symbols-outlined').click();\r\n");
      out.write("						\r\n");
      out.write("					} else {\r\n");
      out.write("						alert('failed');\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error: function(a,b,c) {\r\n");
      out.write("					console.log(a,b,c);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		$('#btnClose').click(() => {\r\n");
      out.write("			$('.sidebar-title .material-symbols-outlined').click();\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		let plist = null;\r\n");
      out.write("		\r\n");
      out.write("		function load() {\r\n");
      out.write("			\r\n");
      out.write("			const sw = map.getBounds().getSouthWest();\r\n");
      out.write("			const ne = map.getBounds().getNorthEast();\r\n");
      out.write("						\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: 'GET',\r\n");
      out.write("				url: '/place/listplace.do',\r\n");
      out.write("				data: {\r\n");
      out.write("					swLat: sw.getLat(),\r\n");
      out.write("					swLng: sw.getLng(),\r\n");
      out.write("					neLat: ne.getLat(),\r\n");
      out.write("					neLng: ne.getLng()\r\n");
      out.write("				},\r\n");
      out.write("				dataType: 'json',\r\n");
      out.write("				success: function(result) {\r\n");
      out.write("					\r\n");
      out.write("					plist = result;\r\n");
      out.write("							\r\n");
      out.write("					\r\n");
      out.write("					//다시 설정하기\r\n");
      out.write("					result.forEach(obj => {\r\n");
      out.write("						\r\n");
      out.write("						//장소 1개 > 마커 1개\r\n");
      out.write("						const m1 = new kakao.maps.Marker({\r\n");
      out.write("							position: new kakao.maps.LatLng(obj.lat, obj.lng)\r\n");
      out.write("						});\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						const path = '/place/marker/' + obj.marker;\r\n");
      out.write("						const size = new kakao.maps.Size(64, 64);\r\n");
      out.write("						const op = {};\r\n");
      out.write("						const mImg = new kakao.maps.MarkerImage(path,size,op);\r\n");
      out.write("						m1.setImage(mImg);\r\n");
      out.write("									\r\n");
      out.write("						m1.setMap(map);\r\n");
      out.write("												\r\n");
      out.write("						\r\n");
      out.write("						//장소 1개 > 아이템 1개\r\n");
      out.write("						$('#list').append(`\r\n");
      out.write("							<div onclick=\"selPlace(${obj.seq});\">${obj.name}</div>		\r\n");
      out.write("						`);\r\n");
      out.write("						\r\n");
      out.write("						//추가한 마커를 obj 추가\r\n");
      out.write("						obj.markerObj = m1;\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("					});//forEach\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error: function(a,b,c) {\r\n");
      out.write("					console.log(a,b,c);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		load();\r\n");
      out.write("		\r\n");
      out.write("		function selPlace(seq) {\r\n");
      out.write("			\r\n");
      out.write("			if (event.ctrlKey && confirm('delete?')) {\r\n");
      out.write("				\r\n");
      out.write("				//삭제 처리\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					type: 'POST',\r\n");
      out.write("					url: '/place/delplace.do',\r\n");
      out.write("					data: {\r\n");
      out.write("						seq: seq\r\n");
      out.write("					},\r\n");
      out.write("					success: function(result) {\r\n");
      out.write("						\r\n");
      out.write("						if (result.result == '1') {\r\n");
      out.write("							$('#list').html('');\r\n");
      out.write("							\r\n");
      out.write("							plist.forEach(obj => {\r\n");
      out.write("								obj.markerObj.setMap(null);\r\n");
      out.write("							});		\r\n");
      out.write("							\r\n");
      out.write("							load();\r\n");
      out.write("							\r\n");
      out.write("							$('#tblView').hide();\r\n");
      out.write("						} else {\r\n");
      out.write("							alert('failed');\r\n");
      out.write("						}\r\n");
      out.write("						\r\n");
      out.write("					},\r\n");
      out.write("					error: function(a,b,c) {\r\n");
      out.write("						console.log(a,b,c);\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("				\r\n");
      out.write("				return;\r\n");
      out.write("			}			\r\n");
      out.write("			//alert(seq);\r\n");
      out.write("			\r\n");
      out.write("			$('#tblView').show();\r\n");
      out.write("			\r\n");
      out.write("			$('#list > div').css('background-color', 'transparent');\r\n");
      out.write("			$('#list > div').css('color', '#555');\r\n");
      out.write("			\r\n");
      out.write("			$(event.target).css('background-color', 'yellowgreen');\r\n");
      out.write("			$(event.target).css('color', 'white');\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			plist.forEach(obj => {\r\n");
      out.write("				if (obj.seq == seq) {\r\n");
      out.write("					//alert(obj.lat);\r\n");
      out.write("					map.panTo(new kakao.maps.LatLng(obj.lat, obj.lng));\r\n");
      out.write("					\r\n");
      out.write("					$('#viewName').text(obj.name);\r\n");
      out.write("					$('#viewLat').text(obj.lat.substring(0, 7));\r\n");
      out.write("					$('#viewLng').text(obj.lng.substring(0, 7));\r\n");
      out.write("					$('#viewAddress').text(obj.address);\r\n");
      out.write("					$('#viewDescription').text(obj.description);\r\n");
      out.write("					\r\n");
      out.write("					obj.markerObj.setOpacity(1);\r\n");
      out.write("				} else {\r\n");
      out.write("					obj.markerObj.setOpacity(.3);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		kakao.maps.event.addListener(map, 'zoom_changed', function(evt) {\r\n");
      out.write("			\r\n");
      out.write("			//초기화 > 다시 목록 읽어오기\r\n");
      out.write("			//이전 목록 지우기(초기화)\r\n");
      out.write("			$('#list').html('');\r\n");
      out.write("			\r\n");
      out.write("			plist.forEach(obj => {\r\n");
      out.write("				obj.markerObj.setMap(null);\r\n");
      out.write("			});		\r\n");
      out.write("			\r\n");
      out.write("			load();\r\n");
      out.write("			\r\n");
      out.write("			$('#tblView').hide();\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		kakao.maps.event.addListener(map, 'dragend', function(evt) {\r\n");
      out.write("			\r\n");
      out.write("			//초기화 > 다시 목록 읽어오기\r\n");
      out.write("			//이전 목록 지우기(초기화)\r\n");
      out.write("			$('#list').html('');\r\n");
      out.write("			\r\n");
      out.write("			plist.forEach(obj => {\r\n");
      out.write("				obj.markerObj.setMap(null);\r\n");
      out.write("			});		\r\n");
      out.write("			\r\n");
      out.write("			load();\r\n");
      out.write("			\r\n");
      out.write("			$('#tblView').hide();\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		/* \r\n");
      out.write("		setTimeout(() => {\r\n");
      out.write("			$('#btnSidebar').click();			\r\n");
      out.write("		}, 300); \r\n");
      out.write("		*/\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/index.jsp(111,6) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/index.jsp(111,6) '${clist}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${clist}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/index.jsp(111,6) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("dto");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("						<option value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dto.seq}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dto.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</option>\r\n");
            out.write("						");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent(null);
      // /WEB-INF/views/index.jsp(215,3) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/index.jsp(215,3) '${clist}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${clist}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/index.jsp(215,3) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("dto");
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("			{\r\n");
            out.write("				seq: ");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dto.seq}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(",\r\n");
            out.write("				name: '");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dto.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("',\r\n");
            out.write("				marker: '");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dto.marker}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("'\r\n");
            out.write("			},\r\n");
            out.write("			");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }
}

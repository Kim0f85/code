package com.test.java.obj;

public class Ex30_Class {
	public static void main(String[] args) {
		//Ex30_Class.java
		/*
			자바, Java
			- 객체 지향 프로그래밍 언어
			- object oriented programing language > OOP
			- 객체를 중심으로 프로그램을 만드는 방식 
			- 클래스라는 설계도를 사용해서, 
			  객체라는 것을 만들고, 
			  만들어진 객체를 사용해서 내가 원하는 행동을 구현하는것. 
		
			클래스, class
			1. 클래스, class
				- 객체를 만드는 설계도 
				- 객체를 분류하는 기준 
				- 붕어빵 틀
				
			2. 객체(개체), Object
				- 붕어빵
				-
				
			3. 인스턴스, Instance
				- 붕어빵
				- 메모리에 실체화된 객체
				
			4. 추상화
				- 실존하는 객체들의 공통점을 모아서 정의
				- 단순화 
				
			5. 정보은닉
				- 객체의 내부를 외부에 노출시키지 않는 작업 
				- 내부를 외부로부터 보호하는 역할
				- 외부에 객체를 봤을 때 행동을 단순화시키는 역할
				
			
			6. 캡슐화 
				- 외부로부터 내부를 보호하는 작업
				
			
			7. 인터페이스 
				- 케이스의 구멍+버튼 
			
			8. 프로퍼티(property), 속성(Attribute)
			
			
			9. 행동(Behavior)
				- 메서드
				- 객체가 가지는 행동
			
			10. 상속(Inheritance)
				- 클래스간의 상속
			
		
		
		*/
		
		//요구사항] 지도 > 우리집 > 좌표 저장 
		
		//Case 1.
		//- 가장 간단한 방법
		//- 식별자 문제 > 같은 성질의 식별자가 서로 다른 이름을 사용
		//				 > 구조를 물리적으로 보장 안함 
		//- 구조적 문제 > 규칙(x), 조작 불편 
		
		//우리집 좌표 
		int x = 100;
		int y = 200;
		System.out.printf("우리집은 [%d,%d]에 위치합니다.\n",x,y);
		
		//마트 좌표 
		int x2 = 300;
		int y2 = 400;
		System.out.printf("마트는 [%d,%d]에 위치합니다.\n",x2,y2);
		
		//Case 2
		//-배열 사용
		
		//우리집 좌표 
		//- 정수 x 2개
		int[] a1 = {100,200};
		System.out.printf("우리집은 [%d,%d]에 위치합니다.\n",a1[0],a1[1]);
		
		
		
		
	}
}

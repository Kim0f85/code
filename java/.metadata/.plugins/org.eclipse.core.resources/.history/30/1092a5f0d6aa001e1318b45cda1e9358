package com.test.java;

public class Ex18_Method {
	
	public static void main(String[] args) {
		
		/*
		 
		 메서드 오버로딩, Method Overloading ***면접 단골 질문
		 - 같은 이름의 메서드를 여러개 만드는 기술
		 - 메서드의 인자 리스트를 다양한 형태로 구성해서, 같은 이름의 메서드를 여러개 만드는 기술
		 
		 
		 메서드 오버로딩을 하는 이유?
		 - 성능 향상 > X
		 - 개발자에게 도움 > O
		 
		 
		 
		 메서드 오버로딩 구현 조건 가능
		 1. 매개변수의 개수
		 2. 매개변수의 자료형
		 
		 
		 
		 메서드 오버로딩 구현 조건 불가능
		 1. 매개변수의 이름
		 2. 반환값의 자료형
		 
		 
		 메서드를 만드는 중
		 1. public static void test() {} //O 
		 2. public static void test() {} //X , 1번  중복
		 3. public static void test(int n) {} // O - 매개변수의 개수가 달라서 
		 
		 메소드 호출하기
		 test(); // 1번 호출, 3번 호출 불가 
		 test(10); // 3번 호출 
		 
		 
		 
		 
		 
		 
		 */
		
		//요구사항] 선을 그리는데 메서드를 선언하시오.
		
		// drawLine();
		// System.out.println("    성적표");
		// drawLine();
		
		//요구사항] ------
		//요구사항] ****** 
		
		
		// 기본선
		drawLine();
		drawLine();
		drawLine();
		drawLine("+");
		drawLine("+");
		drawLine("+");
		
		
		System.out.println(10);
		System.out.println("문자열");
		
		
	}//main

	
	public static void println(in num) {
		
	}
	
	public static void println(String txt) {
		
	}
	
	// public static void drawLine() {
		
		//System.out.println("================");
		
	//}
	
	//public static void drawLine() {
		
		//System.out.println("----------------");
		
		//public static void drawLine() {
			
			//System.out.println("*************");
	
	public static void drawLine() {
		
		System.out.println("================");
		
}
		
	public static void drawLine(String c) {
	System.out.print(c);
	System.out.print(c);
	System.out.print(c);
	System.out.print(c);
	System.out.print(c);
	System.out.print(c);
	
	// 인자값이 다르면 허용 = 오버로딩 
}
		
		
}
			
			
}

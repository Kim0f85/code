package com.test.java;

public class Ex10_Casting {
	
	public static void main(String[] args) {
		
		/*
		 
		 
		 형변환, 자료형변환
		 - Promotion, Casting
		 - 하나의 자료형을 다른 자료형으로 변환하는 작업 (중요)
		 - 코드 작성을 유연하게 하기 위해서 사용
		 - int > double 
		 - float > short
		 
		 1. 암시적 형변환(자동 형변환), Promotion
		 	- 큰형 = 작은형
		 	작은형을 큰형에 
		 	- 100% 안전 
		 	
		 
		 2. 명시적 형변환(강제 형변환), Casting
		 	- 작은형 = 큰형
		 	큰형을 작은형에
		 	- 경우에 따라 다르다. 될 수도 있고 안될수도 있다
		 	오버플로우 현상이 나타날 수 있다..
		 
		 
		 
		 */
		
		
		//1. 암시적 형변환
		byte b1;
		short s1;
		
		b1 = 10; //원
		
		//LValue =  RValue 
		// ***** LValue 와 RValue 의 자료형은 반드시 동일

		// (자료형) : 형변환 연산자 
		
		//Short = Byte
		//컴파일러가 변형시켜서 오류가 안난다
		// s1 = b1; //값복사, 복사본
		// Short = Short
		// ( ) 변환은 우리 눈에 안보인다, 그래서 암시적 s1 = b1; 
		s1 = (short)b1; 
		
		
		System.out.println(s1);
		
		
		//2. 명시적 형변환
		byte b2;
		short s2;
		
		s2 = 128; //원본,
		
		// Byte(1) = Short(2)
		// 작은형 = 큰형, 이때는 우리가 직접 (   )
		b2 = (byte)s2;
		
		System.out.println(b2); //복사본
		// 결과 -128 쓰레기값.
		
		//기업 은행 > 계좌
		int m1;
		long m2 = 3000000000L;
		
		//계좌 이체
		// 4 = 8
		m1 = (int)m2;
		
		System.out.printf("계좌이체결과: %,d원\n", m1);
		
		
		//큰형 = 작은형
		//long = int
		//long = short
		//long = byte
		//int = short
		//int = byte
		//short = byte
		
		//작은형 = 큰형
		//byte = long
		//byte = int
		//byte = short
		//short = int
		//short = long
		//int = long
		
		//정수형 리터럴은 int이다.
		//실수형 리터럴은 double이다.
		
		//byte = int
		//작은형(1) = 큰형(4)
		//명시적 형변환
		byte a1 = 10;
		
		short a2 = 10;
		
		int a3 = 10;
		
		// 큰형(8) = 작은형(4)
		// 암시적 형변환
		long a4 = 10;
		
		//실수도 형변환 가능
		
		//작은형(4) = 큰형(8)
		float f1 = (float)3.14;
		float f2 = 3.14F;
		
		double f3 = 3.14F;
		
		// 정수 > 정수
		// 실수 > 실수
		// 실수 > 정수
		// 정수 > 실수
		
		int n1 = 100; //원본 (4byte)
		float n2;     //복사본 (4)
		
		// float = int
		// 암시적 형변환 > 안전
		n2 = n1;
		
		System.out.println(n2);
		
		
		int n3;     //복사본(4)
		float n4 = 100; //원본(4)
	
		
		// Type mismatch: cannot convert from float to int
		// 암시적인 형변환은 지원 안한다. 
		// n3 = n4;
		// byte 가 똑같다고 속으면 안된다 float 가 훨씬 크다 
		n3 = (int)n4;
		
		System.out.println(n3);
		
		long n5;
		float n6 = 10;
		
		//long(8) = float (4) 
		// byte가 더 크지만, float가 훨씬 더 크다.
		System.out.println(Long.MAX_VALUE);
		System.out.println(Float.MAX_VALUE);
		
		n5 = (long)n6;
		
		System.out.println(n5);
		
		//*** 정수와 실수간의 크기 비교는 단순한 메모리 크기가 아닌, 실제 저장하는 수의 범위로 비교한다.
		
		//byte(1) < short(2) < int(4) < long(8) <<< float(4) < double(8)
		// 불리언은 형변환 불가능 , 
		
		
		
		//char 형변환
		char c1 = 'A'; //내부에는 숫자 데이터
		System.out.println(c1);
		System.out.println((int)c1); // 문자코드값이 나옴, 
		
		System.err.println((char)65); 
		
		char c2; //2byte , 원본 
		short t2; // 2byte 정수로 변수 만듦 
		
		c2 = '가';
		
		//short(2) = char(2)
		t2 = (short)c2; // 문자 코드값으로 변환 , 오른쪽 같다고  생각..?  
		
		System.out.println(t2);
		
	
		char c3;
		short t3;
		
		t3 = 65;
		
		c3 = (char)t3;
		
		System.out.println(c3);
		
		// short 범위 (-32768~32767) , char는 음수가 없으므로, 0~65535 교집합이 32767 밖에 안됨
		// 그래서 언더플로우, 오버플로우가 나타날 수 있으므로, 암시적이 아닌 명시적 지원이 필요함
		// char 정수화시키기 위해서는 short 를 쓰면 안됨, 반드시 int
		// ***** char 는 반드시 int로만 형변환한다. 
		
		
	
		// ***** 값형과 참조형간에는 형변환이 절대 불가능하다. 
		// Cannot cast from String to int 에러
		// System.out.println((int)"A"); // 에러남 (참조형 - 값형 변환)  	
		System.out.println((int)'A'); // 가능 (값형 - 값형 변환) 
		
		
		// String txt = "A"
		// int result;
		// result = (int)txt;
		
		// 형변환은 아니나, 문자를 값으로 바꿀 수 있음  
		String txt = "100";
		int result;	
		result = Integer.parseInt(txt); //"100" > 100
		
		// Stack (값)  Heap (참조)를 Stack에 가져올 때 주소값을 넣는데,  주소값을 데이터화시킬 수 없으므로 참조형 - 값형 변환이 불가하다.  
		
		
		// 100 > "100"
		String txt2 = String.valueOf(100); // 정석
		
		String txt3 = 100 + ""; // 한쪽이 숫자고, 한쪽이 문자면 붙여서 문자화시킨다. 편법
		
	}

}

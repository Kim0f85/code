package com.test.java.regex;

public class Ex69_RegEx {
	
	public static void main(String[] args) {
		
		//com.test.java.regex > Ex69_RegEx.java
		
		/*
			
			정규 표현식, Regular Expression
			- 정규식 > "[특정 패턴]의 문자열을 검색하는 도구"
			
			
			정규 표현식 요소(=문법)
			
			1. x
				- x는 임의의 문자 1개
				ex) a > a
				ex) abc > abc
			
			2. .
				- 임의의 문자 1개
				ex) . > 문자 1개
				ex) .. > 문자 2개
				ex) a.c > abc aac acc adc azc a1c a홍c
				ex) a..c > abbc a길동c a11c
				ex) a.?c > abc, adc, ac
			
			3. 출현횟수
				- 바로 앞의 문자(집합)의 출현 횟수를 표현
				
				3.1 생략
					- 바로 앞의 대상의 출현 횟수가 생략X, 중복X
					- 출현 횟수: 1
					ex) a*bc > ab, abc, abb, ac, bc, bbc, aaabc
									
				3.2 ?
					- 바로 앞의 대상의 출현 횟수가 생략O, 중복X
					- 출현 횟수: 0~1
					ex) a?bc > ab, abc, abb, ac, bc, bbc, aaabc
					ex) 홍?길동 > 안녕~ 길동아~ 네 이름은 홍길동이지?
					ex) 홍길동? > 안녕~ 길동아~ 네 이름은 홍길동이지? 홍길
					ex) 자바?코드 > 자바코드가 있습니다. 그런데 코드에 에러가 있어요. 추가로 자코드가 있습니다.
					ex) (자바)?코드 > 자바코드가 있습니다. 그런데 코드에 에러가 있어요. 추가로 자코드가 있습니다.
				
				3.3 +
					- 바로 앞의 대상의 출현 횟수가 생략X, 중복O
					- 출현 횟수: 1~무한대
					ex) a+bc > ab, abc, abb, ac, bc, bbc, aaabc
					ex) 홍+길동 > 안녕~ 길동아~ 네 이름은 홍길동이지? 홍홍길동, 홍홍홍홍홍홍홍홍홍홍홍홍길동
					ex) (자바)+코드 > 자바코드가 있습니다. 그런데 코드에 에러가 있어요. 추가로 자코드가 있습니다. 자바자바코드, 자바자바자바자바자바코드
				
				3.4 *
					- 바로 앞의 대상의 출현 횟수가 생략O, 중복O
					- 출현 횟수: 0~무한대
					ex) a*bc > ab, abc, abb, ac, bc, bbc, aaabc
					ex) 홍*길동 > 안녕~ 길동아~ 네 이름은 홍길동이지? 홍홍길동, 홍홍홍홍홍홍홍홍홍홍홍홍길동
					ex) (자바)*코드 > 자바코드가 있습니다. 그런데 코드에 에러가 있어요. 추가로 자코드가 있습니다. 자바자바코드, 자바자바자바자바자바코드
			
					ex) 홍?홍길동 > 안녕~ 길동아~ 네 이름은 홍길동이지? 홍홍길동, 홍홍홍홍홍홍홍홍홍홍홍홍길동
			
			4. 선택, Choice
				- 연산자 or 역할
				- [] 안의 문자 중 1개를 검색
				
				4.1 [열거값]
					ex) [012] > 제 나이는 12살입니다. 제 동생은 10살이에요. 키는 160cm입니다. 몸무게는 50kg이에요.
					ex) [나생는] > 제 나이는 12살입니다. 제 동생은 10살이에요. 키는 160cm입니다. 몸무게는 50kg이에요.
					ex) [김이박]길동 > 홍길동, 김길동, 이길동, 박길동, 정길동, 최길동
					ex) [김이박]?길동 > 홍길동, 김길동, 이길동, 박길동, 정길동, 최길동
					ex) [0123456789]+ >
					ex) [8374950172] >  
					
					ex) 주민등록번호
						980101-1234567
						
						[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789]-[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789][0123456789]
						
					ex) 전화번호
					
						010-1234-5678
						010-8765-0872
						010-8769-8943
						010-384-9837
						
						010-[0123456789]?[0123456789][0123456789][0123456789]-[0123456789][0123456789][0123456789][0123456789]
						
					ex) 영어 소문자 > [abcdefghijklmnopqrstuvwxyz]+
					
					ex) 영어 대문자 > [ABCDEFGHIJKLMNOPQRSTUVWXYZ]
					
					ex) 영문자 > [ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]
					
					ex) 한글 > [가강간감각나난]
					
					*** 선택에서 연속된 문자를 간단하게 표현하는 방법
						- 문자 코드값 사용
					
					ex) 숫자 > [0123456789] > [0-9]
					ex) 영어소문자 > [a-z]
					ex) 영어대문자 > [A-Z]
					ex) 영문자 > [A-Za-z]
					ex) 한글 > [가-힣]
					
					ex) [c-f]
					ex) [5-9]
					
					ex) 전화번호 > 010-[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]
					ex) 주민번호 > [0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9]
					
					ex) 홍씨 사람들? > 홍.. > 홍[가-힣][가-힣]
					
					ex) 영문자 > [A-Za-z] or [a-zA-Z]
					ex) 영문자+숫자 > [A-Za-z0-9]
					ex) 영문자+숫자+한글 > [A-Za-z0-9가-힣]
					ex) 식별자로 적합한 문자(영문자 + 숫자 + '_')
						> [A-Za-z0-9_]
				
				4.2 [^열거값]
					- 4.1의 부정
					- 열거값을 제외한 나머지 검색
					
					ex) [0-9] > [^0-9]+
			
			
			5. 출연횟수
				- 바로 앞의 문자(집합)의 출현 횟수를 표현
				- ?, +, * > 더 세밀한 패턴 지정이 가능
				
				5.1 {n}
					- n: 출현 횟수
					ex) a{1}bc > ab, bc, abc, ac, abbc, abcc, aabc, aaabc
					ex) a{2}bc > ab, bc, abc, ac, abbc, abcc, aabc, aaabc
					ex) a{3}bc > ab, bc, abc, ac, abbc, abcc, aabc, aaabc
				
				5.2 {n,m}
					- n: 최소 출현 횟수
					- m: 최대 출현 횟수
					ex) a{1,2}bc > ab, bc, abc, ac, abbc, abcc, aabc, aaabc
					ex) a{2,3}bc > ab, bc, abc, ac, abbc, abcc, aabc, aaabc
					ex) a{0,1}bc > ab, bc, abc, ac, abbc, abcc, aabc, aaabc
				
				5.3 {n,}
					- n: 최소 출현 횟수
					- 생략: 무한대
					ex) a{1,}bc > ab, bc, abc, ac, abbc, abcc, aabc, aaabc
					ex) a{0,}bc > ab, bc, abc, ac, abbc, abcc, aabc, aaabc
				
					ex) a?bc
					ex) a{0,1}bc
				
				ex) 주민번호 > [0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9]
				
				ex) 주민번호 > [0-9]{6}-[0-9]{7} //현역
				ex) 전화번호 > 010-[0-9]{3,4}-[0-9]{4}
				
				ex) 한글 2~4자 > [가-힣]{2,4}
				
				ex) 영문자 5자 이상 > [A-Za-z]{5,}
				
				ex) 영문자 5자 이상 + 첫문자가 대문자로 시작 >
				 	[A-Z]{1}[A-Za-z]{4,}
				 	[A-Z][A-Za-z]{4,}
				 	
				 	
			6. 처음과 끝
				- 입력 컨트롤 or 입력 값을 대상으로 사용
				
				6.1 ^
					- 뒤의 표현으로 반드시 시작
					- str.startsWith("홍")
					ex) ^홍길동
				
				6.2 $
					- 앞의 표현으로 반드시 끝
					- str.endsWith("동")
					ex) 홍길동$


			7. 줄임 표현
			
				7.1 \d or \D
				 	- Digital > 숫자
				 	- [0-9] == \d
				 	- [^0-9] == \D
				 	ex) [0-9]{6}-[0-9]{7}
				 	ex) \d{6}-\d{7}
				 	
				 7.2 \w or \W
				 	- Word > 영어대소문자 + 숫자 + '_' 조합
				 	ex) \w{2,5}
				 	ex) [A-Za-z0-9_]{2,5}
				 	
				 7.3 \s or \S
				 	- 공백 문자(스페이스, 탭, 엔터)
				 	ex) \s+
				 	ex) \S+
				 
							
		*/
		
		m1();
		
	}//main

	private static void m1() {
		
		//자바 > 여러 메서드의 인자값으로 정규 표현식을 지원한다.
		
		//게시판 > 글쓰기 > 개인정보(전화번호) 마스킹
		String txt = "안녕하세요. 홍길동입니다. 제 연락처는 010-8765-9876 입니다. 연락주세요. 010.1234.5678혹시 연락이 01023456789 안되면 다른 번호 010-5243-4922로 연락주세요.";
		
		System.out.println(
			txt
				.replaceAll("[0-9]{3}-[0-9]{3,4}-[0-9]{4}", "xxx-xxxx-xxxx")
				.replaceAll("[0-9]{3}.[0-9]{3,4}.[0-9]{4}", "xxx-xxxx-xxxx")
				.replaceAll("[0-9]{10,11}", "xxx-xxxx-xxxx")
		);
		
		System.out.println(txt.replaceFirst("[0-9]{3}-[0-9]{3,4}-[0-9]{4}", "xxx-xxxx-xxxx"));
		
	}

}

















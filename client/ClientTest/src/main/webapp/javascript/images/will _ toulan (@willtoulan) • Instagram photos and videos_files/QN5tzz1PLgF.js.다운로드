;/*FB_PKG_DELIM*/

__d("IGDSReportPanoOutline24Icon.react",["IGDSSVGIconBase.react","react"],(function(a,b,c,d,e,f,g){"use strict";var h,i=(h||(h=d("react"))).unstable_useMemoCache,j=h;function a(a){var b=i(3),d;b[0]===Symbol["for"]("react.memo_cache_sentinel")?(d=j.jsx("path",{d:"M18.001 1h-12a5.006 5.006 0 0 0-5 5v9.005a5.006 5.006 0 0 0 5 5h2.514l2.789 2.712a1 1 0 0 0 1.394 0l2.787-2.712h2.516a5.006 5.006 0 0 0 5-5V6a5.006 5.006 0 0 0-5-5Zm3 14.005a3.003 3.003 0 0 1-3 3h-2.936a1 1 0 0 0-.79.387l-2.274 2.212-2.276-2.212a1 1 0 0 0-.79-.387H6a3.003 3.003 0 0 1-3-3V6a3.003 3.003 0 0 1 3-3h12a3.003 3.003 0 0 1 3 3Zm-9-1.66a1.229 1.229 0 1 0 1.228 1.228A1.23 1.23 0 0 0 12 13.344Zm0-8.117a1.274 1.274 0 0 0-.933.396 1.108 1.108 0 0 0-.3.838l.347 4.861a.892.892 0 0 0 1.77 0l.348-4.86a1.106 1.106 0 0 0-.3-.838A1.272 1.272 0 0 0 12 5.228Z"}),b[0]=d):d=b[0];b[1]!==a?(d=j.jsx(c("IGDSSVGIconBase.react"),babelHelpers["extends"]({},a,{viewBox:"0 0 24 24",children:d})),b[1]=a,b[2]=d):d=b[2];return d}b=j.memo(a);g["default"]=b}),98);
__d("MAWThreadId",["I64","LSMessagingThreadTypeUtil","ReQL","asyncToGeneratorRuntime","recoverableViolation","unrecoverableViolation"],(function(a,b,c,d,e,f,g){"use strict";var h;function a(a,b){return i.apply(this,arguments)}function i(){i=b("asyncToGeneratorRuntime").asyncToGenerator(function*(a,b){a=(yield d("ReQL").firstAsync(d("ReQL").fromTableAscending(a.mi_act_mapping_table.index("chat_id")).getKeyRange((h||(h=d("I64"))).of_int32(b))));if(a!=null)return a.serverThreadKey;throw c("unrecoverableViolation")("Tried to convert a rowId to thread key but couldn't find a\n      corresponding row in the mapping table. This can mean that\n      there is a race condition between the time a thread was created\n      on the WA backend, and the time it was inserted into the mapping table.\n      i.e. this function is called before the fn that inserts the mapping\n      into the mapping table","messenger_web_product")});return i.apply(this,arguments)}function e(a){c("recoverableViolation")("Checking if a threadKey is a secure thread key in Occamadillo. We should be\n      checking the thread's thread type instead","messenger_web_product");return!1}function j(a,b){return k.apply(this,arguments)}function k(){k=b("asyncToGeneratorRuntime").asyncToGenerator(function*(a,b){a=(yield d("ReQL").firstAsync(d("ReQL").fromTableAscending(a.threads).getKeyRange(b)));if(a==null)return;return a.threadType});return k.apply(this,arguments)}function f(a,b){return l.apply(this,arguments)}function l(){l=b("asyncToGeneratorRuntime").asyncToGenerator(function*(a,b){a=(yield j(a,b));return a==null?!1:d("LSMessagingThreadTypeUtil").isSecure(a)});return l.apply(this,arguments)}function m(a,b){return d("ReQL").firstAsync(d("ReQL").fromTableAscending(a.threads).getKeyRange(b))}g.toThreadKey_DEPRECATED=a;g.isThreadId=e;g.isSecureThreadId=f;g.getThreadFromJid=m}),98);